Production Backend API
API Id: l5ngx5jw55c3fm6fvsnd36wsly
https://4uge4cy2izfbxatfhxsybgisy4.appsync-api.us-east-2.amazonaws.com/graphql
User pool ID: us-east-2_c2X0v3W9w
User pool name: amplifyAuthUserPool4BA7F805-HBYosGobAiT9
Client Id: 9cm
Cognito password: production app password
Cognito tables postfix: l5ngx5jw55c3fm6fvsnd36wsly
Cloud Watch Yahoo Finance API Lambda Log Groups: /aws/lambda/amplify-d2e69i37zo9xzq-ma-getYfinanceDataHandlerla-RLOGqOW47Vq5

Sandbox Backend API
API id: jqszaeydbfhm5ex22dp3pel2aq
https://bghjt37zhvfb3db3eqser5acda.appsync-api.us-east-2.amazonaws.com/graphql
User pool ID: us-east-2_pUPpquHw2
User pool name: amplifyAuthUserPool4BA7F805-HfGMCMCr1RC2
User id: e10b55e0-9031-70db-23f9-cdf5d997659c
Client Id: 1nn
Cognito password: local app password
Cognito tables postfix: mlajp6dltzfd5ancggexykwlcy
Cloud Watch Yahoo Finance API Lambda Log Groups: /aws/lambda/amplify-awsamplifygen2-ma-getYfinanceDataHandlerla-EA4A5PUwfJz3

###############################

Step 4: Manual Approval Process (Admin Task)

- After users sign up and confirm their email, an administrator will need to go to the AWS Cognito Console.
- Navigate to your User Pool.
- Find the user under the "Users" section.
- Click on the username.
- Go to the "Group membership" tab.
- Click "Add user to group".
- Select the "ApprovedUsers" group and confirm.

###############################

Overall Test Strategy:

The goal is to create a suite of E2E tests using Playwright that cover the full lifecycle of "Buy" and "Sell" transactions, including updates, and meticulously verify the impact of these operations on the key financial overview statistics: Realized P/L, Unrealized P/L, and Total P/L, broken down by Swing, Hold, and overall Stock categories.

Key Test Suites & Scenarios:

Single Stock - Complete Lifecycle:

Objective: Track a single stock through adding initial buy transactions (Swing, Hold, Split), updating these buy transactions (changing price, investment, or share distribution like SHR), mocking changes in the stock's current market price, creating sell transactions (partial and full, profitable and loss-making) from existing wallets, and finally updating these sell transactions.
Verification: At each step, assert:
Correct creation/update of transaction records.
Correct creation/update of corresponding Swing and/or Hold wallets (buy price, shares, investment).
Accurate recalculation of all Realized, Unrealized, and Total P/L figures in the stock's overview section.
Multi-Wallet Interactions (Complex Scenarios):

Objective: Test scenarios where multiple buy transactions at different prices or with different types (Swing/Hold/Split) create a more complex wallet structure. Then, perform sells that could draw from multiple wallets or test how updates to earlier transactions affect the overall picture.
Verification: Similar to the single stock lifecycle, focusing on how the system aggregates P/L from multiple sources and handles updates in a multi-wallet context.
Edge Cases and Error Handling:

Objective: Ensure robustness by testing invalid inputs, actions that should be disallowed (e.g., selling more shares than available), and potentially disruptive actions (e.g., deleting a buy transaction that has linked sells).
Verification: Correct error messages are displayed, disallowed actions are prevented, and the system state remains consistent. P/L figures should either remain unchanged or be correctly adjusted if an operation (like a permitted deletion) proceeds.
Data Management & Test Structure:

CSV-Driven Tests: Continue using CSV files to define detailed scenarios and steps. Each row will represent an action and its expected outcomes.
CSV Columns:
Identifiers: scenarioName, stepName, testDescription.
Action Definition: actionToPerform (e.g., addBuy, updateBuy, createSellFromWallet, updateSell, mockCurrentPrice, deleteTransaction).
Transaction Data: stockSymbol, date, transactionAction (Buy/Sell), txnType (Swing/Hold/Split), signal, price, investment (for Buy), quantity (for Sell), shrPercent (for Split Buys).
Targeting for Updates/Deletes: targetTransactionId or targetWalletId (or a robust way to identify them, e.g., "latestBuyForStockXYZ").
Mocking: newCurrentPrice (for mockCurrentPrice action).
Crucial - Expected P/L Overview Stats: Detailed columns for every P/L metric that needs verification (e.g., expectedRealizedSwingPL_USD, expectedUnrealizedHoldPL_Percent, expectedTotalStockPL_USD).
(Optional but Recommended) Expected Wallet States: Columns for key wallet attributes after an operation (e.g., expectedSwingWallet_RemainingShares, expectedHoldWallet_BuyPrice).
Playwright Spec Files: Organize tests into logical .spec.ts files (e.g., full-transaction-lifecycle.spec.ts, pl-calculation-complex.spec.ts). These files will parse the CSVs and execute the defined steps.
Essential Helper Functions (in pageHelpers.ts):

Transaction Operations:
addBuyTransaction(page, buyData)
updateBuyTransaction(page, identifier, updateData)
createSellTransactionFromWallet(page, walletIdentifier, sellData)
updateSellTransaction(page, transactionIdentifier, updateData)
deleteTransaction(page, transactionIdentifier)
Data Retrieval & Verification:
getStockOverviewStats(page, stockSymbol): Returns a structured object of all P/L values from the UI.
getWalletDetails(page, walletIdentifier): Returns details for a specific wallet.
getTransactionDetails(page, transactionIdentifier)
Test Environment Control:
mockCurrentStockPrice(page, stockSymbol, newPrice): This is critical. It will likely involve intercepting and modifying the API response that usePrices relies on, or using a test-specific backend endpoint if available.
clearStockData(page, stockSymbol): Essential for ensuring test isolation by deleting all transactions and wallets for a given stock before each scenario.
Navigation & Common UI Interactions: Continue using and expanding existing helpers.
Key Implementation Considerations:

Mocking Current Stock Price: This is paramount for testing Unrealized and Total P/L. The most robust E2E approach is to mock the API responses that provide this price data to the frontend. Playwright's network interception capabilities (page.route()) are ideal for this.
State Management & Isolation: Each test scenario (or even major step block) must start from a known, clean state for the stock(s) involved. The clearStockData helper will be heavily used.
Identifying Elements for Interaction/Verification:
Use stable data-testid attributes extensively on all relevant UI elements (input fields, buttons, P/L display areas, wallet rows, transaction rows).
When a transaction or wallet is created, if its ID is available in the UI or via a notification, capture it for use in subsequent steps (e.g., updating that specific item). Otherwise, rely on other unique attributes from your CSV data to locate it.
Precision in Assertions: For financial values (currency, percentages, shares), always compare using an epsilon (a small tolerance) to account for potential floating-point arithmetic nuances. Do not use exact equality for these.
Comprehensive Assertions: Don't just check one P/L value. Verify all relevant P/L categories (Swing, Hold, Stock for Realized, Unrealized, Total) to ensure calculations are correct across the board.
Modularity and Reusability: Break down complex actions into smaller, reusable helper functions. This will make tests easier to write, read, and maintain.
Debugging Aids: Include console.log statements within your test helpers (perhaps controlled by an environment variable) to output key data during test execution, which can be invaluable for debugging. Playwright's tracing capabilities are also excellent.
This strategy should provide excellent coverage of the transaction and P/L calculation functionalities. The main challenges will be implementing robust price mocking and ensuring clean state management between tests.